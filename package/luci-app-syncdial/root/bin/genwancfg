#!/bin/sh
# macvlan 及 PPPoE 拨号接口配置批量自动生成脚本
# Copyright (C) 2015-2016 GuoGuo<gch981213@gmail.com>
# Copyright (C) 2017 Xingwang Liao<kuoruan@gmail.com>

. /lib/functions.sh

# 检测IP列表
chk_ip_list="$(grep 'nameserver' /tmp/resolv.conf.auto | cut -d' ' -f2 | sort | uniq | xargs)" chk_ip_list="${chk_ip_list} 180.76.76.76 223.5.5.5 223.6.6.6 114.114.114.114 114.114.115.115"
fw_str="wan wan6"

# 添加 MWAN 负载均衡相关配置
# $1:接口名称
mwan_cfg_add() {
	# gen mwan3_interface
	uci -q batch <<-EOF >/dev/null
		set mwan3.${1}=interface
		set mwan3.${1}.enabled=1
		set mwan3.${1}.count=1
		set mwan3.${1}.timeout=2
		set mwan3.${1}.interval=5
		set mwan3.${1}.down=3
		set mwan3.${1}.up=2
	EOF

	for i in $chk_ip_list; do
		uci add_list mwan3.${1}.track_ip="$i"
	done

	uci -q batch <<-EOF >/dev/null
		set mwan3.${1}.reliability=1
		# gen mwan3_member
		set mwan3.${1}_m1_w1=member
		set mwan3.${1}_m1_w1.interface=${1}
		set mwan3.${1}_m1_w1.metric=1
		set mwan3.${1}_m1_w1.weight=1
		# gen mwan3_policy
		add_list mwan3.balanced.use_member=${1}_m1_w1
	EOF
}

# 删除 MWAN 负载均衡相关配置
# $1:接口名称
mwan_cfg_del() {
	uci -q batch <<-EOF >/dev/null
		del mwan3.${1}
		del mwan3.${1}_m1_w1
		del_list mwan3.balanced.use_member=${1}_m1_w1
	EOF
}

# 添加 macvlan 设备
# $1:设虚拟备名称 $2:原始设备名称
macvlan_dev_add() {
	uci -q batch <<-EOF >/dev/null
		set network.macvlandev_${1}=device
		set network.macvlandev_${1}.name=${1}
		set network.macvlandev_${1}.ifname=${2}
		set network.macvlandev_${1}.type=macvlan
	EOF
}

# 添加 PPPoE 接口
# $1:接口名称 $2:设备名称 $3:账户 $4:密码 $5:网关跃点
pppoe_if_add() {
	uci -q batch <<-EOF >/dev/null
		# gen wan if
		set network.${1}=interface
		set network.${1}.ifname=${2}
		set network.${1}.proto=pppoe
		set network.${1}.username=${3}
		set network.${1}.password=${4}
		set network.${1}.metric=${5}
		# gen firewall
		fw_str="${fw_str} ${1}"
	EOF
}

apply_cfg() {
	uci commit
	/etc/init.d/network restart
	killall pppconnectcheck
	/etc/init.d/firewall restart
	mwan3 restart
}

general_config_load() {
	config_load 'syncdial'
	config_get_bool enabled 'general' 'enabled' '0'
	config_get_bool old_frame 'general' 'old_frame' '0'
	if [ ."$enabled" = ."0" ]; then
		echo "Disabled. Exit now."
		apply_cfg
		exit 1
	fi
	config_get wannum 'general' 'wannum'

	config_load 'network'
	config_get pppoe_user 'wan' 'username'
	config_get pppoe_password 'wan' 'password'
	pppoe_ifname="$(uci get network.wan.ifname)"
}

check_remove_device() {
	local devcfg=${1}
	[ "${devcfg::11}" = "macvlandev_" ] && uci del network.${devcfg}
}

check_remove_interface() {
	local ifcfg=${1}
	if [ "${ifcfg::4}" = "vwan" ]; then
		uci -q batch <<-EOF >/dev/null
			del network.${ifcfg}
		EOF
		mwan_cfg_del "${ifcfg}"
	fi
}

general_config_remove() {
	config_load network
	config_foreach check_remove_device 'device'
	config_foreach check_remove_interface 'interface'
	if [ ."$(uci get network.wan.proto)" = ."none" ]; then
		uci set network.wan.proto=pppoe
	fi
	mwan_cfg_del "wan"
	uci set firewall.@zone[1].network="wan wan6"
}


general_config_remove
general_config_load

uci set network.wan.metric=40
if [ ."$old_frame" = ."1" ]; then
	uci set network.wan.proto=none
	ifname="$(uci get network.wan.ifname)"
	for i in $(seq 1 $wannum); do
		mac_str="$(cat /sys/class/net/${ifname}/address | awk -F ':' '{print $1":"$2":"$3":"$4":"$5}')"
		mac_str="${mac_str}$(printf ":%x" $(expr 16 + $i))"
		ip link add link $ifname name macvlan$i type macvlan
		ifconfig macvlan$i hw ether "$mac_str"
		ifconfig macvlan$i up
	done
fi
[ ."$old_frame" = ."0" ] && mwan_cfg_add wan

for i in $(seq 1 $wannum); do
	[ ."$old_frame" = ."0" ] && macvlan_dev_add macvlan$i $pppoe_ifname
	pppoe_if_add "vwan$i" "macvlan$i" "$pppoe_user" "$pppoe_password" $(expr 40 + $i)
	mwan_cfg_add "vwan$i"
done

uci set firewall.@zone[1].network="$fw_str"

apply_cfg

return 0
