--- a/src/plugins/kdb/ldap/ldap_exp.c	2012-07-16 23:05:23.081992133 +0200
+++ b/src/plugins/kdb/ldap/ldap_exp.c	2012-07-18 21:58:53.430279512 +0200
@@ -71,9 +71,9 @@
     /* alloc */                             krb5_ldap_alloc,
     /* free */                              krb5_ldap_free,
     /* optional functions */
-    /* fetch_master_key */                  NULL /* krb5_ldap_fetch_mkey */,
+    /* fetch_master_key */                  krb5_ldap_fetch_mkey,
     /* fetch_master_key_list */             NULL,
-    /* store_master_key_list */             NULL,
+    /* store_master_key_list */             krb5_ldap_store_mkey,
     /* Search enc type */                   NULL,
     /* Change pwd   */                      NULL,
     /* promote_db */                        NULL,
--- a/src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h	2012-07-17 00:35:11.546115558 +0200
+++ b/src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.h	2012-07-18 21:44:18.371065900 +0200
@@ -298,6 +298,20 @@
                                     const krb5_db_entry *server,
                                     krb5_const_principal proxy);
 
+krb5_error_code
+krb5_ldap_fetch_mkey(krb5_context   context,
+                     krb5_principal mname,
+                     krb5_keyblock *key,
+                     krb5_kvno     *kvno,
+                     char          *db_args);
+
+krb5_error_code
+krb5_ldap_store_mkey(krb5_context       context,
+                     char               *keyfile,
+                     krb5_principal     mname,
+                     krb5_keylist_node  *keylist,
+                     char               *master_pwd);
+
 /* DAL functions */
 
 
--- a/src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.c	2012-07-16 23:23:20.852083111 +0200
+++ b/src/plugins/kdb/ldap/libkdb_ldap/kdb_ldap.c	2012-07-18 23:22:32.423362711 +0200
@@ -34,6 +34,7 @@
 #endif
 
 #include <ctype.h>
+#include "ldap_main.h"
 #include "kdb_ldap.h"
 #include "ldap_misc.h"
 #include <kdb5.h>
@@ -49,6 +50,9 @@
 #endif
 #endif
 
+static const char *mkeyattr[] = {"krbMKey",NULL};
+
+
 krb5_error_code
 krb5_ldap_get_db_opt(char *input, char **opt, char **val)
 {
@@ -563,3 +567,170 @@
 
     return code;
 }
+
+krb5_error_code
+krb5_ldap_fetch_mkey(krb5_context   context,
+			krb5_principal mname,
+			krb5_keyblock *key,
+			krb5_kvno     *kvno,
+			char          *db_args)
+{
+
+	krb5_error_code		st=0, tempst=0;
+	LDAP			*ld=NULL;
+	LDAPMessage		*result=NULL, *ent=NULL;
+	krb5_ldap_context	*ldap_context=NULL;
+	kdb5_dal_handle		*dal_handle=NULL;
+	krb5_ldap_server_handle	*ldap_server_handle=NULL;
+	krb5_data		*realm = krb5_princ_realm(context, mname);
+
+	char			filter[256];
+	struct berval		**values=NULL;
+	char			*mkey=NULL;
+	unsigned int		mkeylen;
+	krb5_ui_2		enctype;
+
+	SETUP_CONTEXT();
+	GET_HANDLE();	
+
+	(void) snprintf(filter, sizeof(filter), "(&(cn=%s)(objectclass=krbRealmContainer))", realm->data);
+	LDAP_SEARCH_1(ldap_context->krbcontainer->DN, LDAP_SCOPE_SUBTREE, filter, (char**)mkeyattr, IGNORE_STATUS);
+
+	if (st != LDAP_SUCCESS) {
+		st = set_ldap_error(context, st, OP_SEARCH);
+		goto cleanup;
+	}
+
+	ent=ldap_first_entry(ld, result);
+	if (ent == NULL) {
+		st = set_ldap_error(context, LDAP_NO_SUCH_OBJECT, OP_SEARCH);
+		goto cleanup;
+	}		
+
+	values=ldap_get_values_len(ld, ent, mkeyattr[0]);
+	if (values == NULL || values[0] == NULL) {
+		st = set_ldap_error(context, LDAP_NO_SUCH_OBJECT, OP_SEARCH);
+		goto cleanup;
+	}
+
+	mkey    = values[0]->bv_val;
+	mkeylen = values[0]->bv_len;
+
+	if (mkeylen < 4) {
+		st = KRB5_KDB_BADSTORED_MKEY;
+		goto cleanup;
+	}
+
+	enctype = (mkey[0]<<8) | mkey[1];
+
+	if (key->enctype == ENCTYPE_UNKNOWN)
+		key->enctype = enctype;
+	else if (enctype != key->enctype) {
+		st = KRB5_KDB_BADSTORED_MKEY;
+		goto cleanup;
+	}
+
+	key->length = (mkey[2]<<8) | mkey[3];
+	if (!key->length || ((int) key->length) < 0 || 4 + key->length >  mkeylen) {
+		st = KRB5_KDB_BADSTORED_MKEY;
+		goto cleanup;
+	}
+
+	if (!(key->contents = (krb5_octet *)malloc(key->length))) {
+		st = ENOMEM;
+		goto cleanup;
+	}
+
+	memcpy(key->contents, mkey+4, key->length);
+	key->magic = KV5M_KEYBLOCK;
+
+	if (kvno && *kvno == IGNORE_VNO)
+		*kvno = 1;
+
+cleanup:
+	if (values)
+		ldap_value_free_len(values);
+
+	if (result)
+		ldap_msgfree(result);
+
+	krb5_ldap_put_handle_to_pool(ldap_context, ldap_server_handle);
+	return st;
+}
+
+krb5_error_code
+krb5_ldap_store_mkey(krb5_context       context,
+                     char               *keyfile,
+                     krb5_principal     mname,
+                     krb5_keylist_node  *keylist,
+                     char               *master_pwd)
+{
+	krb5_error_code		st=0, tempst=0;
+	LDAP			*ld=NULL;
+	LDAPMessage		*result=NULL, *ent=NULL;
+	LDAPMod			mod;
+	LDAPMod			*mods[] = {&mod, NULL};
+	struct berval		val;
+	struct berval		*vals[] = {&val, NULL};
+	krb5_ldap_context	*ldap_context=NULL;
+	kdb5_dal_handle		*dal_handle=NULL;
+	krb5_ldap_server_handle	*ldap_server_handle=NULL;
+	krb5_data		*realm = krb5_princ_realm(context, mname);
+
+	char			filter[256];
+	char			*dn;
+	char			mkey[256];
+	krb5_keyblock		key;
+	int			err;
+
+	if (keylist == NULL) {
+		st = KRB5_KDB_BADSTORED_MKEY;
+		goto cleanup;
+	}
+	key = keylist->keyblock;
+
+	if (key.length + 4 > sizeof(mkey)) {
+		st = ENOMEM;
+		goto cleanup;
+	}
+
+	val.bv_len = key.length + 4;
+	val.bv_val = mkey;
+	mkey[0] = (key.enctype>>8) & 0xff;
+	mkey[1] = key.enctype & 0xff;
+	mkey[2] = (key.length>>8) & 0xff;
+	mkey[3] = key.length & 0xff;
+	memcpy(mkey+4, key.contents, key.length);
+
+	SETUP_CONTEXT();
+	GET_HANDLE();
+
+	(void) snprintf(filter, sizeof(filter), "(&(cn=%s)(objectclass=krbRealmContainer))", realm->data);
+	LDAP_SEARCH_1(ldap_context->krbcontainer->DN, LDAP_SCOPE_SUBTREE, filter, (char**)mkeyattr, IGNORE_STATUS);
+
+	if (st != LDAP_SUCCESS) {
+		st = set_ldap_error(context, st, OP_SEARCH);
+		goto cleanup;
+	}
+
+	ent=ldap_first_entry(ld, result);
+	if (ent == NULL) {
+		st = set_ldap_error(context, LDAP_NO_SUCH_OBJECT, OP_SEARCH);
+		goto cleanup;
+	}		
+
+	dn = ldap_get_dn(ld, ent);
+	mod.mod_op = LDAP_MOD_REPLACE | LDAP_MOD_BVALUES;
+	mod.mod_type = (char*)mkeyattr[0];
+	mod.mod_vals.modv_bvals = vals;
+	ldap_modify_ext_s(ld, dn, mods, NULL, NULL);
+	ldap_get_option(ld, LDAP_OPT_ERROR_NUMBER, &err);
+	st = set_ldap_error(context, err, OP_MOD);
+
+cleanup:
+	if (result)
+		ldap_msgfree(result);
+
+	krb5_ldap_put_handle_to_pool(ldap_context, ldap_server_handle);
+	return st;
+}
--- a/src/plugins/kdb/ldap/libkdb_ldap/libkdb_ldap.exports	2012-07-17 00:13:46.839328053 +0200
+++ b/src/plugins/kdb/ldap/libkdb_ldap/libkdb_ldap.exports	2012-07-18 10:20:22.854262689 +0200
@@ -45,3 +45,5 @@
 krb5_ldap_check_policy_as
 krb5_ldap_audit_as_req
 krb5_ldap_check_allowed_to_delegate
+krb5_ldap_fetch_mkey
+krb5_ldap_store_mkey
